-- OpenGroupware.org database schema update script
-- (C) 2007-2024 Helge Hess
-- this script updates the OGo database schema from v1.0 to v5.4


-- pg-update-1.x-to-5.5.psql, used to be a separate file

ALTER TABLE object_acl 
  ALTER COLUMN object_id TYPE INT USING object_id::int;
ALTER TABLE object_acl 
  ALTER COLUMN auth_id   TYPE INT USING auth_id::int;

ALTER TABLE document ADD COLUMN company_id INT NULL;
ALTER TABLE document ADD COLUMN job_id     INT NULL;

CREATE TABLE ctags (
  entity VARCHAR NOT NULL,
  ctag   INTEGER NOT NULL DEFAULT 0
);

ALTER TABLE ctags 
  ADD CONSTRAINT ctag_unique_entity UNIQUE (entity);

INSERT INTO ctags (entity) VALUES ('Person'); 
INSERT INTO ctags (entity) VALUES ('Enterprise');
INSERT INTO ctags (entity) VALUES ('Date');
INSERT INTO ctags (entity) VALUES ('Job');
INSERT INTO ctags (entity) VALUES ('Team');

ALTER TABLE company ADD COLUMN birthplace    VARCHAR(255) NULL;
ALTER TABLE company ADD COLUMN birthname     VARCHAR(255) NULL;
ALTER TABLE company ADD COLUMN family_status VARCHAR(255) NULL;
ALTER TABLE company ADD COLUMN citizenship   VARCHAR(255) NULL; -- CSV?!
ALTER TABLE company ADD COLUMN dayofdeath    TIMESTAMP WITH TIME ZONE NULL;
ALTER TABLE company ADD COLUMN modern_password VARCHAR(255) NULL;

-- district of a city (eg Magdeburg "Nord")
ALTER TABLE address ADD COLUMN district VARCHAR(255) NULL;
ALTER TABLE address ADD COLUMN latitude       FLOAT8 NULL;
ALTER TABLE address ADD COLUMN longitude      FLOAT8 NULL;
ALTER TABLE address ADD COLUMN radius         FLOAT8 NULL;
ALTER TABLE address ADD COLUMN title          TEXT   NULL;
ALTER TABLE address ADD COLUMN structured_version INT NULL;

-- ensure that a type is used only once per person/company (eg you can only have
-- one 'bill' address, this is because OGo creates dictionaries based on the
-- type)
-- Note(2025-03-01): This does NOT make NULL/type combo's unique, which fits
--                   our usecase of detached addresses.
ALTER TABLE address   ADD CONSTRAINT company_unique_adrtype
  UNIQUE ( company_id, type );


-- prepare for project hierarchies
ALTER TABLE project ADD COLUMN parent_project_id INT NULL;

CREATE TABLE login_token (
  token           VARCHAR(4096) PRIMARY KEY,
  account_id      INT   NOT NULL,
  environment     TEXT  NULL,
  info            TEXT  NULL,
  creation_date   TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
  touch_date      TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
  timeout         INT DEFAULT 3600 NOT NULL,
  expiration_date TIMESTAMP WITH TIME ZONE NULL
);

ALTER TABLE job ADD COLUMN owner_id INT;
UPDATE job SET owner_id = creator_id WHERE owner_id IS NULL;
ALTER TABLE job ADD COLUMN date_id INT;
ALTER TABLE job ADD COLUMN url     TEXT;

ALTER TABLE date_x ADD COLUMN project_id          INT;
ALTER TABLE date_x ADD COLUMN url                 TEXT;
ALTER TABLE date_x ADD COLUMN location_id         INT;
ALTER TABLE date_x ADD COLUMN location_id_version INT;

-- pg-update-1.0to5.4.psql, used to be a separate file

ALTER TABLE object_acl ALTER COLUMN object_id TYPE INT USING object_id::int;
ALTER TABLE object_acl ALTER COLUMN auth_id   TYPE INT USING auth_id::int;

ALTER TABLE company_value
  ADD COLUMN start_date TIMESTAMP WITH TIME ZONE NULL;
ALTER TABLE company_value
  ADD COLUMN end_date TIMESTAMP WITH TIME ZONE NULL;

ALTER TABLE company_assignment
 ADD COLUMN start_date TIMESTAMP WITH TIME ZONE NULL;
ALTER TABLE company_assignment
 ADD COLUMN end_date   TIMESTAMP WITH TIME ZONE NULL;

ALTER TABLE project_company_assignment
 ADD COLUMN start_date TIMESTAMP WITH TIME ZONE NULL;
ALTER TABLE project_company_assignment
 ADD COLUMN end_date   TIMESTAMP WITH TIME ZONE NULL;

-- field to connect documents and notes to contacts
-- Also in pg-update-1.x-to-5.5.psql
ALTER TABLE document ADD COLUMN company_id INT NULL;


-- both do not work on SX:
-- nor elsewhere, there seems to be a bug in OGo that duplicates `email1` at
-- least.
ALTER TABLE telephone ADD CONSTRAINT company_unique_phonetype
  UNIQUE ( company_id, type );
ALTER TABLE company_value ADD CONSTRAINT company_unique_valuetype
  UNIQUE ( company_id, attribute );
-- => those show dupes, cleanup DB to import
SELECT T1.company_id, T1.type, T1.telephone_id, T2.telephone_id
  FROM telephone T1 INNER JOIN telephone T2 
    ON ( T1.company_id = T2.company_id AND T1.type = T2.type AND
   NOT (T1.telephone_id = T2.telephone_id) );
SELECT T1.company_id, T1.attribute, T1.company_value_id, T2.company_value_id
  FROM company_value T1 INNER JOIN company_value T2 
    ON ( T1.company_id = T2.company_id AND T1.attribute = T2.attribute AND
  NOT (T1.company_value_id = T2.company_value_id) );


-- TBD: we should probably include the full join info (ie company data)
--      well, maybe a smaller record is faster for in-object processing,
--      this can also have a relationship to the two company objects!
CREATE VIEW employment AS
  SELECT
    ca.company_assignment_id,
    ca.company_id     AS enterprise_id,
    ca.sub_company_id AS person_id,
    ca.is_headquarter, ca.is_chief, ca."function",
    ca.db_status,
    ca.start_date, ca.end_date
  FROM company_assignment ca
  INNER JOIN enterprise e USING (company_id)
  INNER JOIN person     p ON (p.company_id = ca.sub_company_id);

CREATE RULE employment_add AS ON INSERT TO employment DO INSTEAD
  INSERT INTO company_assignment (
    company_assignment_id, company_id, sub_company_id,
    is_headquarter, is_chief, "function", db_status,
    start_date, end_date
  )
  VALUES (
    new.company_assignment_id, new.enterprise_id, new.person_id,
    new.is_headquarter, new.is_chief, new."function", new.db_status,
    new.start_date, new.end_date
  );

CREATE RULE employment_set AS ON UPDATE TO employment DO INSTEAD
  UPDATE company_assignment
  SET company_id     = new.enterprise_id,
      sub_company_id = new.person_id,
      is_headquarter = new.is_headquarter,
      is_chief       = new.is_chief,
      "function"     = new."function",
      db_status      = new.db_status,
      start_date     = new.start_date,
      end_date       = new.end_date
  WHERE company_assignment_id = old.company_assignment_id;

CREATE RULE employment_delete AS ON DELETE TO employment DO INSTEAD
  DELETE FROM company_assignment
  WHERE company_assignment_id = old.company_assignment_id;



CREATE VIEW company_hierarchy AS
  SELECT
    ca.company_assignment_id,
    ca.company_id     AS parent_id,
    ca.sub_company_id AS company_id,
    ca.is_headquarter, ca.is_chief, ca."function",
    ca.db_status,
    ca.start_date AS start_date, ca.end_date AS end_date
  FROM company_assignment ca
  INNER JOIN enterprise e1 USING (company_id)
  INNER JOIN enterprise e2 ON (e2.company_id = ca.sub_company_id);

CREATE RULE company_hierarchy_add AS ON INSERT TO company_hierarchy DO INSTEAD
  INSERT INTO company_assignment (
    company_assignment_id, company_id, sub_company_id,
    is_headquarter, is_chief, "function", db_status,
    start_date, end_date
  )
  VALUES (
    new.company_assignment_id, new.parent_id, new.company_id,
    new.is_headquarter, new.is_chief, new."function", new.db_status,
    new.start_date, new.end_date
  );

CREATE RULE company_hierarchy_set AS ON UPDATE TO company_hierarchy DO INSTEAD
  UPDATE company_assignment
  SET company_id     = new.parent_id,
      sub_company_id = new.company_id,
      is_headquarter = new.is_headquarter,
      is_chief       = new.is_chief,
      "function"     = new."function",
      db_status      = new.db_status,
      start_date     = new.start_date,
      end_date       = new.end_date
  WHERE company_assignment_id = old.company_assignment_id;

CREATE RULE company_hierarchy_delete AS ON DELETE TO company_hierarchy DO INSTEAD
  DELETE FROM company_assignment
  WHERE company_assignment_id = old.company_assignment_id;

-- TBD: we should probably include the full join info (ie company data)
CREATE VIEW person_relationship AS
  SELECT
    ca.company_assignment_id,
    ca.company_id     AS person_id,
    ca.sub_company_id AS related_person_id,
    -- TBD: ca.is_headquarter, ca.is_chief, 
    ca."function" AS relationship,
    ca.db_status,
    ca.start_date, ca.end_date
  FROM company_assignment ca
  INNER JOIN person e USING (company_id)
  INNER JOIN person p ON (p.company_id = ca.sub_company_id);

CREATE RULE person_relationship_add AS 
    ON INSERT TO person_relationship DO INSTEAD
  INSERT INTO company_assignment (
    company_assignment_id, company_id, sub_company_id,
    "function", db_status,
    start_date, end_date
  )
  VALUES (
    new.company_assignment_id, new.person_id, new.related_person_id,
    new.relationship, new.db_status,
    new.start_date, new.end_date
  );

CREATE RULE person_relationship_set AS 
    ON UPDATE TO person_relationship DO INSTEAD
  UPDATE company_assignment
  SET company_id     = new.person_id,
      sub_company_id = new.related_person_id,
      "function"     = new."relationship",
      db_status      = new.db_status,
      start_date     = new.start_date,
      end_date       = new.end_date
  WHERE company_assignment_id = old.company_assignment_id;

CREATE RULE person_relationship_delete AS 
    ON DELETE TO person_relationship DO INSTEAD
  DELETE FROM company_assignment
        WHERE company_assignment_id = old.company_assignment_id;


-- TBD: we should probably include the full join info (ie team data)
CREATE VIEW team_membership AS
  SELECT
    ca.company_assignment_id,
    ca.company_id     AS team_id,
    ca.sub_company_id AS person_id,
    ca.is_headquarter, ca.is_chief, ca."function",
    ca.db_status,
    ca.start_date AS start_date, ca.end_date AS end_date
  FROM company_assignment ca
  INNER JOIN team   t USING (company_id)
  INNER JOIN person p ON (p.company_id = ca.sub_company_id);

CREATE VIEW team_hierarchy AS
  SELECT
    ca.company_assignment_id,
    ca.company_id     AS parent_id,
    ca.sub_company_id AS team_id,
    ca.is_headquarter, ca.is_chief, ca."function",
    ca.db_status,
    start_date, end_date
  FROM company_assignment ca
  INNER JOIN team t1 USING (company_id)
  INNER JOIN team t2 ON (t2.company_id = ca.sub_company_id);


CREATE VIEW project_teams AS
  SELECT pca.*
  FROM project_company_assignment pca
  JOIN team e USING (company_id);

CREATE RULE project_teams_add AS ON INSERT TO project_teams DO INSTEAD
  INSERT INTO project_company_assignment (
    project_company_assignment_id, company_id, project_id, info,
    has_access, access_right, db_status
  )
  VALUES (
    new.project_company_assignment_id, new.company_id, new.project_id, new.info,
    new.has_access, new.access_right, new.db_status
  );
CREATE RULE project_teams_set AS ON UPDATE TO project_teams DO INSTEAD
  UPDATE project_company_assignment
  SET company_id = new.company_id, project_id = new.project_id, info = new.info,
      has_access = new.has_access, access_right = new.access_right,
      db_status  = new.db_status
  WHERE project_company_assignment_id = old.project_company_assignment_id;

CREATE RULE project_teams_del AS ON DELETE TO project_teams DO INSTEAD
  DELETE FROM project_company_assignment
  WHERE project_company_assignment_id = old.project_company_assignment_id;


CREATE VIEW project_persons AS
  SELECT pca.*
  FROM project_company_assignment pca
  JOIN person p USING (company_id);

CREATE RULE project_persons_add AS ON INSERT TO project_persons DO INSTEAD
  INSERT INTO project_company_assignment (
    project_company_assignment_id, company_id, project_id, info, has_access,
    access_right, db_status, start_date, end_date
  )
  VALUES (
    new.project_company_assignment_id, new.company_id, new.project_id, new.info,
    new.has_access, new.access_right, new.db_status,
    new.start_date, new.end_date
  );
CREATE RULE project_persons_set AS ON UPDATE TO project_persons DO INSTEAD
  UPDATE project_company_assignment
  SET company_id = new.company_id, project_id = new.project_id, info = new.info,
      has_access = new.has_access, access_right = new.access_right,
      db_status  = new.db_status,
      start_date = new.start_date, end_date = new.end_date
  WHERE project_company_assignment_id = old.project_company_assignment_id;

CREATE RULE project_persons_del AS ON DELETE TO project_persons DO INSTEAD
  DELETE FROM project_company_assignment
  WHERE project_company_assignment_id = old.project_company_assignment_id;


CREATE VIEW project_companies AS
  SELECT pca.*
  FROM project_company_assignment pca
  JOIN enterprise e USING (company_id);

CREATE RULE project_companies_add AS ON INSERT TO project_companies DO INSTEAD
  INSERT INTO project_company_assignment (
    project_company_assignment_id, company_id, project_id, info, has_access,
    access_right, db_status, start_date, end_date
  )
  VALUES (
    new.project_company_assignment_id, new.company_id, new.project_id, new.info,
    new.has_access, new.access_right, new.db_status,
    new.start_date, new.end_date
  );
CREATE RULE project_companies_set AS ON UPDATE TO project_companies DO INSTEAD
  UPDATE project_company_assignment
  SET company_id = new.company_id, project_id = new.project_id, info = new.info,
      has_access = new.has_access, access_right = new.access_right,
      db_status  = new.db_status,
      start_date = new.start_date, end_date = new.end_date
  WHERE project_company_assignment_id = old.project_company_assignment_id;

CREATE RULE project_companies_del AS ON DELETE TO project_companies DO INSTEAD
  DELETE FROM project_company_assignment
  WHERE project_company_assignment_id = old.project_company_assignment_id;


-- unused? sounds useful, but maybe its overkill
CREATE VIEW project_acl AS
  SELECT pca.*
  FROM project_company_assignment pca
  WHERE has_access = 1;





-- fixup last modified dates / object_version

UPDATE doc  SET object_version    = version_count 
 WHERE object_version    IS NULL;
UPDATE note SET lastmodified_date = creation_date 
 WHERE lastmodified_date IS NULL;

UPDATE doc
SET lastmodified_date =
  (SELECT archive_date FROM document_version 
   WHERE document_version.document_id = doc.document_id 
   ORDER BY version DESC LIMIT 1)
WHERE version_count > 0 AND lastmodified_date IS NULL;

UPDATE job
   SET object_version =
     (SELECT COUNT(*) FROM job_history WHERE job.job_id = job_history.job_id)
 WHERE object_version IS NULL;
UPDATE job_history
    SET object_version = 1
  WHERE object_version IS NULL;

-- not sure whether last_modified is actually done in Windows time by ZideLook,
-- this would be from January 1, 1601
UPDATE job
   SET last_modified = 
    (SELECT EXTRACT(EPOCH FROM action_date) FROM job_history 
      WHERE job.job_id = job_history.job_id 
      ORDER BY action_date DESC LIMIT 1)
 WHERE last_modified IS NULL;



-- fixup email values w/o a proper type set (3)
-- Also add a constraint to protect against that,
-- we'll need to set whether that may break some
-- OGo operations.
UPDATE company_value 
   SET type = 3
 WHERE attribute = 'email1' AND type IS NULL;
ALTER TABLE company_value 
  ADD CONSTRAINT email_type 
  CHECK (NOT (attribute LIKE 'email%') 
         OR ((attribute LIKE 'email%') AND type = 3));

-- All company rows have owner_id's, except the root user itself...,
-- let that recurse, should be fine.
UPDATE company SET owner_id = 10000 
 WHERE login = 'root' AND company_id = 10000 AND owner_id IS NULL;


-- add more column NOT NULL constraints

ALTER TABLE date_x      ALTER COLUMN owner_id             SET NOT NULL;
ALTER TABLE date_x      ALTER COLUMN object_version       SET NOT NULL;
ALTER TABLE date_x      ALTER COLUMN db_status            SET NOT NULL;
ALTER TABLE date_x      ALTER COLUMN is_conflict_disabled SET NOT NULL;

ALTER TABLE date_info               ALTER COLUMN db_status  SET NOT NULL;
ALTER TABLE date_company_assignment ALTER COLUMN db_status  SET NOT NULL;
ALTER TABLE date_company_assignment ALTER COLUMN date_id    SET NOT NULL;
ALTER TABLE date_company_assignment ALTER COLUMN company_id SET NOT NULL;
ALTER TABLE date_company_assignment ALTER COLUMN is_staff   SET NOT NULL;
ALTER TABLE appointment_resource    ALTER COLUMN db_status  SET NOT NULL;

ALTER TABLE job         ALTER COLUMN object_version SET NOT NULL;
ALTER TABLE job         ALTER COLUMN db_status      SET NOT NULL;
ALTER TABLE job         ALTER COLUMN creator_id     SET NOT NULL;
ALTER TABLE job         ALTER COLUMN owner_id       SET NOT NULL;
ALTER TABLE job         ALTER COLUMN executant_id   SET NOT NULL;
ALTER TABLE job         ALTER COLUMN priority       SET NOT NULL;
ALTER TABLE job_history ALTER COLUMN object_version SET NOT NULL;

ALTER TABLE address     ALTER COLUMN db_status      SET NOT NULL;

ALTER TABLE company     ALTER COLUMN owner_id       SET NOT NULL;
ALTER TABLE company     ALTER COLUMN object_version SET NOT NULL;
ALTER TABLE company     ALTER COLUMN db_status      SET NOT NULL;

ALTER TABLE company_value    ALTER COLUMN db_status SET NOT NULL;
ALTER TABLE company_category ALTER COLUMN db_status SET NOT NULL;
ALTER TABLE company_category ALTER COLUMN category  SET NOT NULL;

ALTER TABLE company_assignment ALTER COLUMN company_id     SET NOT NULL;
ALTER TABLE company_assignment ALTER COLUMN sub_company_id SET NOT NULL;
ALTER TABLE company_assignment ALTER COLUMN db_status      SET NOT NULL;

ALTER TABLE project_info               ALTER COLUMN db_status  SET NOT NULL;
ALTER TABLE project_company_assignment ALTER COLUMN db_status  SET NOT NULL;
ALTER TABLE project_company_assignment ALTER COLUMN company_id SET NOT NULL;
ALTER TABLE project_company_assignment ALTER COLUMN project_id SET NOT NULL;
ALTER TABLE project_company_assignment ALTER COLUMN has_access SET NOT NULL;

ALTER TABLE document         ALTER COLUMN db_status      SET NOT NULL;
ALTER TABLE document         ALTER COLUMN creation_date  SET NOT NULL;
ALTER TABLE document         ALTER COLUMN db_status      SET NOT NULL;
ALTER TABLE document         ALTER COLUMN first_owner_id SET NOT NULL;
ALTER TABLE document_editing ALTER COLUMN document_id    SET NOT NULL;
ALTER TABLE document_editing ALTER COLUMN db_status      SET NOT NULL;
ALTER TABLE document_version ALTER COLUMN document_id    SET NOT NULL;
ALTER TABLE document_version ALTER COLUMN db_status      SET NOT NULL;
ALTER TABLE document_version ALTER COLUMN last_owner_id  SET NOT NULL;

-- 2024-12-02: new, allow inline storage of TEXT.
-- this can be a prefix, or the actual content, or sth else.
-- since old clients won't know about this and always access the file,
-- this tracks the object_version of the last write.
ALTER TABLE document ADD COLUMN text_content                TEXT     NULL;
ALTER TABLE document ADD COLUMN text_content_type           SMALLINT NULL;
ALTER TABLE document ADD COLUMN text_content_object_version INT      NULL;


-- Bump versions
-- 54  - things we changed in 2015
-- 55  - things changed end of 2024
-- 56+ - things changed in 2025
UPDATE table_version SET table_version = 55 WHERE table_name = '_model';
UPDATE table_version SET table_version = 56 WHERE table_name = 'address';
UPDATE table_version SET table_version = 56 WHERE table_name = 'company';
UPDATE table_version SET table_version = 56 WHERE table_name = 'company_value';
UPDATE table_version SET table_version = 56
 WHERE table_name = 'company_category';
UPDATE table_version SET table_version = 55 
 WHERE table_name = 'company_assignment';
UPDATE table_version SET table_version = 56 WHERE table_name = 'date';
UPDATE table_version SET table_version = 56 WHERE table_name = 'date_info';
UPDATE table_version SET table_version = 56
 WHERE table_name = 'date_company_assignment';
UPDATE table_version SET table_version = 56
 WHERE table_name = 'appointment_resource';
UPDATE table_version SET table_version = 56 WHERE table_name = 'job';
UPDATE table_version SET table_version = 56 WHERE table_name = 'job_history';
UPDATE table_version SET table_version = 54 WHERE table_name = 'project';
UPDATE table_version SET table_version = 56 WHERE table_name = 'project_info';
UPDATE table_version SET table_version = 55
 WHERE table_name = 'project_company_assignment';
UPDATE table_version SET table_version = 56 WHERE table_name = 'document';
UPDATE table_version SET table_version = 55
 WHERE table_name = 'document_version';
UPDATE table_version SET table_version = 55
 WHERE table_name = 'document_editing';

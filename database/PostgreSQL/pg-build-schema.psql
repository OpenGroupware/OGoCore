-- OpenGroupware.org database schema creation script
-- (C) 2000-2005 SKYRIX Software AG

CREATE TABLE staff (
  staff_id    INT NOT NULL,
  company_id  INT NOT NULL,
  description VARCHAR(255),
  login       VARCHAR(255),
  is_team     SMALLINT,
  is_account  SMALLINT,
  db_status   VARCHAR(50),
  CONSTRAINT  pk_staff PRIMARY KEY (staff_id),
  CONSTRAINT  unique_company_id UNIQUE(company_id)
);

CREATE TABLE company (
  company_id          INT NOT NULL,

  object_version      INT NOT NULL,
  owner_id            INT NOT NULL,
  contact_id          INT,   
  template_user_id    INT,   
  is_private          SMALLINT,
  is_person           SMALLINT,
  is_readonly         SMALLINT,      
  is_enterprise       SMALLINT,
  is_account          SMALLINT,
  is_intra_account    SMALLINT,
  is_extra_account    SMALLINT,
  is_trust            SMALLINT,
  is_team             SMALLINT,
  is_location_team    SMALLINT,
  is_customer         SMALLINT,
  
  number              VARCHAR(100),
  description         VARCHAR(255),
  priority            VARCHAR(50),
  keywords            VARCHAR(255),

  url                 VARCHAR(255),
  email               VARCHAR(100), 
  type                VARCHAR(50),
  bank                VARCHAR(100),
  bank_code           VARCHAR(50),
  account             VARCHAR(50),
  payment             VARCHAR(50),

  is_locked           SMALLINT,
  is_template_user    SMALLINT,
  can_change_password SMALLINT,
  login               VARCHAR(50),
  password            VARCHAR(255),
  pop3_account        VARCHAR(50),

  name                VARCHAR(50),
  middlename          VARCHAR(50), 
  firstname           VARCHAR(50),
  salutation          VARCHAR(50),
  degree              VARCHAR(50),
  birthday            TIMESTAMP WITH TIME ZONE,
  sex                 VARCHAR(10),

  source_url          VARCHAR(255),
  db_status           VARCHAR(50) NOT NULL,

  sensitivity         SMALLINT,                 -- sensitivity
  boss_name           VARCHAR(255),             -- boss' name
  partner_name        VARCHAR(255),             -- partners' name
  assistant_name      VARCHAR(255),             -- assistants' name 
  department          VARCHAR(255),             -- department
  office              VARCHAR(255),             -- office (office number)
  occupation          VARCHAR(255),             -- occupation
  anniversary         TIMESTAMP WITH TIME ZONE, -- anniversary
  dir_server          VARCHAR(255),             -- directory serv. (NetMeeting)
  email_alias         VARCHAR(255),             -- email alias (NetMeeting)
  freebusy_url        VARCHAR(255),             -- free/busy URL

  fileas              VARCHAR(255),             -- file as/save as
  name_title          VARCHAR(255),             -- name title (e.g. Prof.)
  name_affix          VARCHAR(255),             -- name affix (e.g. jun.)
  im_address          VARCHAR(255),             -- Instant Messenger address
  associated_contacts VARCHAR(255),             -- associated contacts
  associated_categories VARCHAR(255),           -- associated categories
  associated_company  VARCHAR(255),             -- associated company

  show_email_as       VARCHAR(255),             -- email show as attr 
  show_email2_as      VARCHAR(255),             -- email show as attr 
  show_email3_as      VARCHAR(255),             -- email show as attr 
  
  birthplace          VARCHAR(255),
  birthname           VARCHAR(255),
  family_status       VARCHAR(255),
  citizenship         VARCHAR(255),
  dayofdeath          TIMESTAMP WITH TIME ZONE,
  
  CONSTRAINT          pk_company PRIMARY KEY (company_id),
  CONSTRAINT          unique_company_number UNIQUE(number),
  CONSTRAINT          unique_company_login  UNIQUE(login)
);

CREATE TABLE company_info (
  company_info_id INT NOT NULL,
  company_id      INT NOT NULL, 
  comment         TEXT,
  db_status       VARCHAR(50),
  CONSTRAINT pk_company_info PRIMARY KEY (company_info_id)
);


-- Note: attribute_type is not mapped in model!
--       neither are: value_date, value_int, category
-- Likely reason: those columns where added to mirror obj_property
CREATE TABLE company_value (
  company_value_id   INT NOT NULL,
  company_id         INT,
  attribute          VARCHAR(255),
  attribute_type     VARCHAR(50),
  value_string       VARCHAR(255),
  value_date         TIMESTAMP WITH TIME ZONE,
  value_int          INT,
  is_enum            SMALLINT,
  category           VARCHAR(255),
  uid                INT, 
  label              VARCHAR(255),
  type               INT,
  is_label_localized SMALLINT,
  db_status          VARCHAR(50),
  
  start_date         TIMESTAMP WITH TIME ZONE,
  end_date           TIMESTAMP WITH TIME ZONE,
  
  CONSTRAINT pk_company_value PRIMARY KEY (company_value_id)
);

CREATE TABLE company_category (
  company_category_id   INT NOT NULL,
  object_version        INT,
  category              VARCHAR(255),
  db_status             VARCHAR(50),
  CONSTRAINT pk_company_category PRIMARY KEY (company_category_id)
);

CREATE TABLE company_assignment (
  company_assignment_id INT NOT NULL,
  company_id            INT NOT NULL,
  sub_company_id        INT NOT NULL,
  is_headquarter        SMALLINT,
  is_chief              SMALLINT,
  function              VARCHAR(255),
  db_status             VARCHAR(50) NOT NULL,
  
  start_date            TIMESTAMP WITH TIME ZONE,
  end_date              TIMESTAMP WITH TIME ZONE,
  
  CONSTRAINT pk_company_assignment PRIMARY KEY (company_assignment_id)
);

CREATE TABLE appointment_resource (
  appointment_resource_id INT NOT NULL,
  object_version          INT,
  name                    VARCHAR(255) NOT NULL,
  email                   VARCHAR(255),
  email_subject           VARCHAR(255),
  category                VARCHAR(255),
  notification_time       INT,
  db_status               VARCHAR(50),
  CONSTRAINT pkx_company_category PRIMARY KEY (appointment_resource_id),
  CONSTRAINT unique_aptresname_idx UNIQUE(name)
);

CREATE TABLE date_x (
  date_id                INT NOT NULL,
  object_version         INT NOT NULL,
  owner_id               INT NOT NULL,
  access_team_id         INT,
  parent_date_id         INT,
  project_id             INT,

  start_date             TIMESTAMP WITH TIME ZONE  NOT NULL,
  end_date               TIMESTAMP WITH TIME ZONE  NOT NULL,
  cycle_end_date         TIMESTAMP WITH TIME ZONE,
  type                   VARCHAR(255),    -- repetition type
  title                  VARCHAR(255) NOT NULL,
  location               VARCHAR(255),
  absence                VARCHAR(255),
  resource_names         VARCHAR(255),
  write_access_list      VARCHAR(255),
  is_absence             SMALLINT,
  is_attendance          SMALLINT,
  is_conflict_disabled   SMALLINT,
  travel_duration_before INT,
  travel_duration_after  INT,
  notification_time      INT,
  db_status              VARCHAR(50) NOT NULL,
  apt_type               VARCHAR(100),    -- appointment type (birthday...)
  calendar_name          VARCHAR(255),
  source_url             VARCHAR(255),
  fbtype                 VARCHAR(50),     -- free/busy type

  sensitivity            SMALLINT,        -- sensitivity
  busy_type              SMALLINT,        -- busy type
  importance             SMALLINT,        -- importance
  last_modified          INT,             -- timestamp of last modification
  evo_reminder           VARCHAR(255),    -- Evolution reminder settings
  ol_reminder            VARCHAR(255),    -- Outlook reminder settings
  online_meeting         VARCHAR(255),    -- CSV for online meeting values
  associated_contacts    VARCHAR(255),    -- Outlook associated_contacts
  keywords               VARCHAR(255),    -- Outlook keywords

  CONSTRAINT             pk_date PRIMARY KEY (date_id)
);

CREATE TABLE date_info (
  date_info_id INT NOT NULL,
  date_id      INT NOT NULL,
  comment      TEXT,
  db_status    VARCHAR(50),
  CONSTRAINT   pk_date_info PRIMARY KEY (date_info_id)
);

CREATE TABLE date_company_assignment (
  date_company_assignment_id INT NOT NULL,
  company_id                 INT,
  date_id                    INT,
  is_staff                   SMALLINT,
  is_new                     SMALLINT, -- seems to be unused
  partstatus                 VARCHAR(50),
  role                       VARCHAR(50),
  comment                    VARCHAR(255),
  rsvp                       SMALLINT,
  db_status                  VARCHAR(50),
  outlook_key                VARCHAR(255),
  CONSTRAINT                 pk_date_company_assignment PRIMARY KEY
                             (date_company_assignment_id)
);

CREATE TABLE project (
  project_id        INT NOT NULL,
  object_version    INT,
  owner_id          INT NOT NULL,
  team_id           INT,
  number            VARCHAR(100),
  name              VARCHAR(255),
  start_date        TIMESTAMP WITH TIME ZONE,
  end_date          TIMESTAMP WITH TIME ZONE,
  status            VARCHAR(255),
  is_fake           SMALLINT, -- whether this is the doc store for a company
  db_status         VARCHAR(50),
  kind              VARCHAR(50),
  url               VARCHAR(100),
  parent_project_id INT,
  CONSTRAINT        pk_project PRIMARY KEY (project_id),
  CONSTRAINT        unique_project_number UNIQUE(number)
);

CREATE TABLE object_acl (
  object_acl_id INT NOT NULL,
  sort_key      INT NOT NULL,
  action        VARCHAR(10) NOT NULL,
  object_id     INT NOT NULL,
  auth_id       INT NOT NULL,
  permissions   VARCHAR(50)
);

CREATE TABLE project_company_assignment (
  project_company_assignment_id INT NOT NULL,
  company_id                    INT NOT NULL,
  project_id                    INT NOT NULL,
  info                          VARCHAR(255),
  has_access                    SMALLINT NOT NULL,
  access_right                  VARCHAR(50),
  db_status                     VARCHAR(50) NOT NULL,
  
  start_date                    TIMESTAMP WITH TIME ZONE,
  end_date                      TIMESTAMP WITH TIME ZONE,
  
  CONSTRAINT pk_project_company_assignment
     PRIMARY KEY (project_company_assignment_id)
);

CREATE TABLE document (
  document_id        INT NOT NULL,
  object_version     INT, -- this is NULL in folders
  project_id         INT,
  parent_document_id INT,
  date_id            INT, -- attach notes and files to events
  job_id             INT, -- attach notes and files to tasks
  
  first_owner_id     INT NOT NULL,
  current_owner_id   INT NOT NULL,
  
  version_count      INT,
  
  file_size          INT,
  is_note            SMALLINT,
  is_folder          SMALLINT,
  is_object_link     SMALLINT,
  is_index_doc       SMALLINT,
  
  title              VARCHAR(255),
  abstract           VARCHAR(255),
  file_type          VARCHAR(255),
  object_link        VARCHAR(255),
  
  creation_date      TIMESTAMP WITH TIME ZONE NOT NULL,
  lastmodified_date  TIMESTAMP WITH TIME ZONE,
  status             VARCHAR(50),
  db_status          VARCHAR(50) NOT NULL,
  
  contact            VARCHAR(255),
  company_id         INT,
  
  -- 2024-12-02: new, allow inline storage of TEXT.
  -- this can be a prefix, or the actual content, or sth else.
  -- since old clients won't know about this and always access the file,
  -- this tracks the object_version of the last write.
  text_content       TEXT NULL,
  text_content_type  SMALLINT,
  text_content_object_version INT, -- the version the content is based upon
  
  CONSTRAINT         pk_document PRIMARY KEY (document_id)
);

CREATE TABLE document_version (
  document_version_id INT NOT NULL,
  object_version      INT,
  document_id         INT NOT NULL,
  last_owner_id       INT NOT NULL,
  title               VARCHAR(255),
  abstract            VARCHAR(255),
  file_type           VARCHAR(255),
  version             INT,
  file_size           INT,
  creation_date       TIMESTAMP WITH TIME ZONE,
  archive_date        TIMESTAMP WITH TIME ZONE,
  is_packed           SMALLINT,
  change_text         TEXT,
  db_status           VARCHAR(50) NOT NULL,
  contact             VARCHAR(255),
  CONSTRAINT          pk_document_version PRIMARY KEY (document_version_id)
);

CREATE TABLE document_editing (
  document_editing_id INT NOT NULL,
  object_version      INT,
  document_id         INT NOT NULL,
  current_owner_id    INT,
  title               VARCHAR(255),
  abstract            VARCHAR(255),
  file_type           VARCHAR(255),
  file_size           INT,
  version             INT,
  is_attach_changed   SMALLINT,
  checkout_date       TIMESTAMP WITH TIME ZONE,
  status              VARCHAR(50),
  db_status           VARCHAR(50) NOT NULL,
  contact             VARCHAR(255),
  CONSTRAINT          pk_document_editing PRIMARY KEY (document_editing_id)
);

CREATE TABLE address (
  address_id     INT NOT NULL,
  object_version INT,
  company_id     INT,
  name1          VARCHAR(255),
  name2          VARCHAR(255),
  name3          VARCHAR(255),
  street         VARCHAR(255),
  zip            VARCHAR(50),
  zipcity        VARCHAR(255),
  country        VARCHAR(100),
  state          VARCHAR(100),
  type           VARCHAR(50) NOT NULL,
  db_status      VARCHAR(50),
  source_url     VARCHAR(255),
  district       VARCHAR(255),
  CONSTRAINT     pk_address PRIMARY KEY (address_id)
);

CREATE TABLE telephone (
  telephone_id   INT NOT NULL,
  object_version INT,
  company_id     INT,
  number         VARCHAR(255),
  real_number    VARCHAR(255),
  type           VARCHAR(50) NOT NULL,
  info           VARCHAR(255),
  url            VARCHAR(255),
  db_status      VARCHAR(50),
  CONSTRAINT     pk_telephone PRIMARY KEY (telephone_id)
);

CREATE TABLE job (
  job_id               INT NOT NULL,
  object_version       INT NOT NULL,
  parent_job_id        INT,
  project_id           INT,
  date_id              INT,
  creator_id           INT NOT NULL,
  owner_id             INT NOT NULL,
  executant_id         INT, -- TBD: NOT NULL?
  name                 VARCHAR(255) NOT NULL,
  start_date           TIMESTAMP WITH TIME ZONE NOT NULL,
  end_date             TIMESTAMP WITH TIME ZONE NOT NULL,
  notify_x             INT,
  is_control_job       SMALLINT,
  is_team_job          SMALLINT,
  is_new               SMALLINT, -- seems to be unused
  job_status           VARCHAR(255),
  category             VARCHAR(255),
  priority             INT,
  db_status            VARCHAR(50) NOT NULL,
  kind                 VARCHAR(50), -- 01_root_process, 00_template
  keywords             VARCHAR(255),
  source_url           VARCHAR(255),
  sensitivity          SMALLINT,
  job_comment          TEXT,
  completion_date      TIMESTAMP WITH TIME ZONE,
  percent_complete     SMALLINT,
  actual_work          SMALLINT,
  total_work           SMALLINT,
  last_modified        INT,
  accounting_info      VARCHAR(255),
  kilometers           VARCHAR(255),
  associated_companies VARCHAR(255),
  associated_contacts  VARCHAR(255),
  timer_date           TIMESTAMP WITH TIME ZONE,
  CONSTRAINT           pk_job PRIMARY KEY (job_id)
);

CREATE TABLE job_history (
  job_history_id INT NOT NULL,
  object_version INT NOT NULL,
  job_id         INT NOT NULL,
  actor_id       INT,
  action         VARCHAR(50),
  action_date    TIMESTAMP WITH TIME ZONE,
  job_status     VARCHAR(50),
  db_status      VARCHAR(50),
  CONSTRAINT     pk_job_history PRIMARY KEY (job_history_id)
);

CREATE TABLE job_history_info (
  job_history_info_id INT NOT NULL,
  job_history_id      INT NOT NULL,
  comment             TEXT,
  db_status           VARCHAR(50),
  CONSTRAINT          pk_job_history_info PRIMARY KEY (job_history_info_id)
);

CREATE TABLE resource (
  resource_id    INT NOT NULL,
  resource_name  VARCHAR(255) NOT NULL,
  token          VARCHAR(255),
  object_id      INT,
  quantity       INT,
  comment        TEXT,
  standard_costs NUMERIC(19,2),
  type           INT NOT NULL,
  db_status      VARCHAR(50),
  object_version INT,
  CONSTRAINT     pk_resource_id PRIMARY KEY (resource_id)
);

CREATE TABLE job_resource_assignment (
  job_resource_assignment_id INT NOT NULL,
  resource_id                INT,
  job_id                     INT,
  operative_part             INT,
  db_status                  VARCHAR(50),
  CONSTRAINT                 pk_job_resource_id PRIMARY KEY 
                             (job_resource_assignment_id)
);

CREATE TABLE news_article (
  news_article_id  INT NOT NULL,
  object_version   INT,
  name             VARCHAR(255),
  caption          VARCHAR(255),
  is_index_article SMALLINT,
  creation_date    TIMESTAMP WITH TIME ZONE,
  db_status        VARCHAR(50),
  CONSTRAINT       pk_news_article PRIMARY KEY (news_article_id)
);

CREATE TABLE news_article_link (
  news_article_link_id INT NOT NULL,
  object_version       INT,
  news_article_id      INT,
  sub_news_article_id  INT,
  CONSTRAINT           pk_article_link PRIMARY KEY (news_article_link_id)
);

CREATE TABLE invoice (
  invoice_id        INT NOT NULL,
  debitor_id        INT NOT NULL,
  parent_invoice_id INT,
  invoice_nr        VARCHAR(255) NOT NULL,
  invoice_date      TIMESTAMP WITH TIME ZONE,
  kind              VARCHAR(100),    
  status            VARCHAR(100) NOT NULL,  
  net_amount        NUMERIC(19,4),
  gross_amount      NUMERIC(19,4),
  paid              NUMERIC(19,4),
  comment           TEXT,
  object_version    INT,
  db_status         VARCHAR(50)  ,
  CONSTRAINT        pk_invoice PRIMARY KEY (invoice_id)
);

CREATE TABLE article_category (
  article_category_id INT NOT NULL,
  category_name       VARCHAR(255) NOT NULL,
  category_abbrev     VARCHAR(255),
  CONSTRAINT          pk_article_category PRIMARY KEY (article_category_id)
);

CREATE TABLE article_unit (
  article_unit_id    INT NOT NULL,
  format             VARCHAR(50),
  singular_unit      VARCHAR(255),
  plural_unit        VARCHAR(255),
  CONSTRAINT         pk_url_x PRIMARY KEY (article_unit_id)
);

CREATE TABLE article (
  article_id          INT NOT NULL,
  article_unit_id     INT,
  article_category_id INT,
  object_version      INT,
  article_name        VARCHAR(255) NOT NULL,
  article_nr          VARCHAR(255) NOT NULL,
  article_text        TEXT,
  status              VARCHAR(50),
  price               NUMERIC(19,4),
  vat                 NUMERIC(19,4),
  vat_group           VARCHAR(50),
  db_status           VARCHAR(50),
  CONSTRAINT          pk_article PRIMARY KEY (article_id)
);

CREATE TABLE invoice_article_assignment (
  invoice_article_assignment_id INT NOT NULL,
  invoice_id                    INT NOT NULL,
  article_id                    INT NOT NULL,
  article_count                 NUMERIC(19,4) NOT NULL,
  object_version                INT,
  net_amount                    NUMERIC(19,4),
  vat                           NUMERIC(19,8),
  comment                       TEXT,
  db_status                     VARCHAR(50),
  CONSTRAINT                    pk_invoice_article_assignment PRIMARY KEY 
                                (invoice_article_assignment_id)
);

CREATE TABLE invoice_account (
  invoice_account_id INT NOT NULL,
  enterprise_id      INT NOT NULL,
  account_nr         VARCHAR(50) NOT NULL,
  balance            NUMERIC(19,4),
  object_version     INT,
  db_status          VARCHAR(50),
  CONSTRAINT         pk_invoice_account PRIMARY KEY (invoice_account_id)
);

CREATE TABLE invoice_action (
  invoice_action_id INT NOT NULL,
  account_id        INT NOT NULL,
  invoice_id        INT,
  document_id       INT,
  action_date       TIMESTAMP WITH TIME ZONE,
  action_kind       VARCHAR(100) NOT NULL,
  log_text          TEXT,
  object_version    INT,
  db_status         VARCHAR(50),
  CONSTRAINT        pk_invoice_action PRIMARY KEY (invoice_action_id)
);

CREATE TABLE invoice_accounting (
  invoice_accounting_id INT NOT NULL,
  action_id             INT NOT NULL,
  debit                 NUMERIC(19,4),
  balance               NUMERIC(19,4),
  object_version        INT,
  db_status             VARCHAR(50),
  CONSTRAINT            pk_invoice_accounting PRIMARY KEY 
                        (invoice_accounting_id)
);

CREATE TABLE job_assignment (
  job_assignment_id INT NOT NULL,
  parent_job_id     INT NOT NULL,
  child_job_id      INT NOT NULL,
  position_x        INT,
  assignment_kind   VARCHAR(50),
  db_status         VARCHAR(50),
  CONSTRAINT        pk_job_assignment PRIMARY KEY (job_assignment_id)
);

CREATE TABLE project_info (
  project_info_id INT NOT NULL,
  project_id      INT NOT NULL, 
  comment         TEXT,
  db_status       VARCHAR(50),
  CONSTRAINT      pk_project_info PRIMARY KEY (project_info_id)
);

CREATE TABLE log (
  log_id        INT NOT NULL,
  creation_date TIMESTAMP WITH TIME ZONE NOT NULL,
  object_id     INT NOT NULL,
  log_text      TEXT NOT NULL,
  action        VARCHAR(100) NOT NULL,
  account_id    INT,
  CONSTRAINT    pk_log PRIMARY KEY (log_id)
);

CREATE TABLE session_log (
  session_log_id INT NOT NULL,
  account_id     INT NOT NULL,
  log_date       TIMESTAMP WITH TIME ZONE NOT NULL,
  action         VARCHAR(255) NOT NULL,
  CONSTRAINT     pk_session_log PRIMARY KEY (session_log_id)
);

CREATE TABLE obj_info (
  obj_id     INT NOT NULL,
  obj_type   VARCHAR(255) NOT NULL,
  CONSTRAINT pk_obj_info PRIMARY KEY (obj_id)
);

CREATE TABLE obj_property (
  obj_property_id  INT NOT NULL,
  obj_id           INT NOT NULL,
  obj_type         VARCHAR(255),
  access_key       INT,     
  value_key        VARCHAR(255) NOT NULL, 
  namespace_prefix VARCHAR(255),     
  preferred_type   VARCHAR(255) NOT NULL, 
  value_string     VARCHAR(255),     
  value_int        INT,     
  value_float      NUMERIC(19,8),
  value_date       TIMESTAMP WITH TIME ZONE,
  value_oid        VARCHAR(255),
  blob_size        INT,
  value_blob       TEXT,
  CONSTRAINT       pk_obj_property PRIMARY KEY (obj_property_id)
);

CREATE TABLE obj_link (
  obj_link_id int          NOT NULL,
  source_id   int          NOT NULL,
  source_type VARCHAR(50)  null,
  target      VARCHAR(255) NOT NULL,
  target_id   int          null,
  target_type VARCHAR(50)  null,
  link_type   VARCHAR(50)  null,
  label       VARCHAR(255) null
);

CREATE TABLE object_model (
  db_version INT NOT NULL,
  model_name VARCHAR(255) not null
);

INSERT INTO object_model(db_version, model_name)
     VALUES ( 3, 'OpenGroupware.org_PostgreSQL');

CREATE TABLE table_version (
  table_name    VARCHAR(255) NOT NULL,
  table_version INT NOT NULL,
  CONSTRAINT    pk_table_version PRIMARY KEY (table_name)
);

CREATE TABLE person ()     INHERITS(company);
CREATE TABLE enterprise () INHERITS(company);
CREATE TABLE trust ()      INHERITS(company);
CREATE TABLE team ()       INHERITS(company);

CREATE TABLE note ()       INHERITS(document);
CREATE TABLE doc ()        INHERITS(document);

-- CTags

CREATE TABLE ctags (
  entity VARCHAR NOT NULL,
  ctag  INTEGER NOT NULL DEFAULT 0
);

ALTER TABLE ctags ADD CONSTRAINT ctag_unique_entity UNIQUE (entity);

INSERT INTO ctags (entity) VALUES ('Person'); 
INSERT INTO ctags (entity) VALUES ('Enterprise');
INSERT INTO ctags (entity) VALUES ('Date');
INSERT INTO ctags (entity) VALUES ('Job');
INSERT INTO ctags (entity) VALUES ('Team');


-- Login Token

CREATE TABLE login_token (
  token           VARCHAR(4096) PRIMARY KEY,
  account_id      INT   NOT NULL,
  environment     TEXT  NULL,
  info            TEXT  NULL,
  creation_date   TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
  touch_date      TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
  timeout         INT DEFAULT 3600 NOT NULL,
  expiration_date TIMESTAMP WITH TIME ZONE NULL
);


-- Views

-- TBD: we should probably include the full join info (ie company data)
CREATE VIEW employment AS
  SELECT
    ca.company_assignment_id,
    ca.company_id     AS enterprise_id,
    ca.sub_company_id AS person_id,
    ca.is_headquarter, ca.is_chief, ca."function",
    ca.db_status,
    ca.start_date, ca.end_date
  FROM company_assignment ca
  INNER JOIN enterprise e USING (company_id)
  INNER JOIN person     p ON (p.company_id = ca.sub_company_id);

CREATE RULE employment_add AS ON INSERT TO employment DO INSTEAD
  INSERT INTO company_assignment (
    company_assignment_id, company_id, sub_company_id,
    is_headquarter, is_chief, "function", db_status,
    start_date, end_date
  )
  VALUES (
    new.company_assignment_id, new.enterprise_id, new.person_id,
    new.is_headquarter, new.is_chief, new."function", new.db_status,
    new.start_date, new.end_date
  );

CREATE RULE employment_set AS ON UPDATE TO employment DO INSTEAD
  UPDATE company_assignment
  SET company_id     = new.enterprise_id,
      sub_company_id = new.person_id,
      is_headquarter = new.is_headquarter,
      is_chief       = new.is_chief,
      "function"     = new."function",
      db_status      = new.db_status,
      start_date     = new.start_date,
      end_date       = new.end_date
  WHERE company_assignment_id = old.company_assignment_id;

CREATE RULE employment_delete AS ON DELETE TO employment DO INSTEAD
  DELETE FROM company_assignment
  WHERE company_assignment_id = old.company_assignment_id;



CREATE VIEW company_hierarchy AS
  SELECT
    ca.company_assignment_id,
    ca.company_id     AS parent_id,
    ca.sub_company_id AS company_id,
    ca.is_headquarter, ca.is_chief, ca."function",
    ca.db_status,
    ca.start_date AS start_date, ca.end_date AS end_date
  FROM company_assignment ca
  INNER JOIN enterprise e1 USING (company_id)
  INNER JOIN enterprise e2 ON (e2.company_id = ca.sub_company_id);

CREATE RULE company_hierarchy_add AS ON INSERT TO company_hierarchy DO INSTEAD
  INSERT INTO company_assignment (
    company_assignment_id, company_id, sub_company_id,
    is_headquarter, is_chief, "function", db_status,
    start_date, end_date
  )
  VALUES (
    new.company_assignment_id, new.parent_id, new.company_id,
    new.is_headquarter, new.is_chief, new."function", new.db_status,
    new.start_date, new.end_date
  );

CREATE RULE company_hierarchy_set AS ON UPDATE TO company_hierarchy DO INSTEAD
  UPDATE company_assignment
  SET company_id     = new.parent_id,
      sub_company_id = new.company_id,
      is_headquarter = new.is_headquarter,
      is_chief       = new.is_chief,
      "function"     = new."function",
      db_status      = new.db_status,
      start_date     = new.start_date,
      end_date       = new.end_date
  WHERE company_assignment_id = old.company_assignment_id;

CREATE RULE company_hierarchy_delete AS ON DELETE TO company_hierarchy DO INSTEAD
  DELETE FROM company_assignment
  WHERE company_assignment_id = old.company_assignment_id;

-- TBD: we should probably include the full join info (ie company data)
CREATE VIEW person_relationship AS
  SELECT
    ca.company_assignment_id,
    ca.company_id     AS person_id,
    ca.sub_company_id AS related_person_id,
    -- TBD: ca.is_headquarter, ca.is_chief, 
    ca."function" AS relationship,
    ca.db_status,
    ca.start_date, ca.end_date
  FROM company_assignment ca
  INNER JOIN person e USING (company_id)
  INNER JOIN person p ON (p.company_id = ca.sub_company_id);

CREATE RULE person_relationship_add AS 
    ON INSERT TO person_relationship DO INSTEAD
  INSERT INTO company_assignment (
    company_assignment_id, company_id, sub_company_id,
    "function", db_status,
    start_date, end_date
  )
  VALUES (
    new.company_assignment_id, new.person_id, new.related_person_id,
    new.relationship, new.db_status,
    new.start_date, new.end_date
  );

CREATE RULE person_relationship_set AS 
    ON UPDATE TO person_relationship DO INSTEAD
  UPDATE company_assignment
  SET company_id     = new.person_id,
      sub_company_id = new.related_person_id,
      "function"     = new."relationship",
      db_status      = new.db_status,
      start_date     = new.start_date,
      end_date       = new.end_date
  WHERE company_assignment_id = old.company_assignment_id;

CREATE RULE person_relationship_delete AS 
    ON DELETE TO person_relationship DO INSTEAD
  DELETE FROM company_assignment
        WHERE company_assignment_id = old.company_assignment_id;


-- TBD: we should probably include the full join info (ie team data)
CREATE VIEW team_membership AS
  SELECT
    ca.company_assignment_id,
    ca.company_id     AS team_id,
    ca.sub_company_id AS person_id,
    ca.is_headquarter, ca.is_chief, ca."function",
    ca.db_status,
    ca.start_date AS start_date, ca.end_date AS end_date
  FROM company_assignment ca
  INNER JOIN team   t USING (company_id)
  INNER JOIN person p ON (p.company_id = ca.sub_company_id);

CREATE VIEW team_hierarchy AS
  SELECT
    ca.company_assignment_id,
    ca.company_id     AS parent_id,
    ca.sub_company_id AS team_id,
    ca.is_headquarter, ca.is_chief, ca."function",
    ca.db_status,
    start_date, end_date
  FROM company_assignment ca
  INNER JOIN team t1 USING (company_id)
  INNER JOIN team t2 ON (t2.company_id = ca.sub_company_id);


CREATE VIEW project_teams AS
  SELECT pca.*
  FROM project_company_assignment pca
  JOIN team e USING (company_id);

CREATE RULE project_teams_add AS ON INSERT TO project_teams DO INSTEAD
  INSERT INTO project_company_assignment (
    project_company_assignment_id, company_id, project_id, info,
    has_access, access_right, db_status,
    start_date, end_date
  )
  VALUES (
    new.project_company_assignment_id, new.company_id, new.project_id, new.info,
    new.has_access, new.access_right, new.db_status, new.start_date, new.end_date
  );
CREATE RULE project_teams_set AS ON UPDATE TO project_teams DO INSTEAD
  UPDATE project_company_assignment
  SET company_id = new.company_id, project_id = new.project_id, info = new.info,
      has_access = new.has_access, access_right = new.access_right,
      db_status  = new.db_status,
      start_date = new.start_date, end_date = new.end_date
  WHERE project_company_assignment_id = old.project_company_assignment_id;

CREATE RULE project_teams_del AS ON DELETE TO project_teams DO INSTEAD
  DELETE FROM project_company_assignment
  WHERE project_company_assignment_id = old.project_company_assignment_id;


CREATE VIEW project_persons AS
  SELECT pca.*
  FROM project_company_assignment pca
  JOIN person p USING (company_id);

CREATE RULE project_persons_add AS ON INSERT TO project_persons DO INSTEAD
  INSERT INTO project_company_assignment (
    project_company_assignment_id, company_id, project_id, info, has_access,
    access_right, db_status, start_date, end_date
  )
  VALUES (
    new.project_company_assignment_id, new.company_id, new.project_id, new.info,
    new.has_access, new.access_right, new.db_status,
    new.start_date, new.end_date
  );
CREATE RULE project_persons_set AS ON UPDATE TO project_persons DO INSTEAD
  UPDATE project_company_assignment
  SET company_id = new.company_id, project_id = new.project_id, info = new.info,
      has_access = new.has_access, access_right = new.access_right,
      db_status  = new.db_status,
      start_date = new.start_date, end_date = new.end_date
  WHERE project_company_assignment_id = old.project_company_assignment_id;

CREATE RULE project_persons_del AS ON DELETE TO project_persons DO INSTEAD
  DELETE FROM project_company_assignment
  WHERE project_company_assignment_id = old.project_company_assignment_id;


CREATE VIEW project_companies AS
  SELECT pca.*
  FROM project_company_assignment pca
  JOIN enterprise e USING (company_id);

CREATE RULE project_companies_add AS ON INSERT TO project_companies DO INSTEAD
  INSERT INTO project_company_assignment (
    project_company_assignment_id, company_id, project_id, info, has_access,
    access_right, db_status, start_date, end_date
  )
  VALUES (
    new.project_company_assignment_id, new.company_id, new.project_id, new.info,
    new.has_access, new.access_right, new.db_status,
    new.start_date, new.end_date
  );
CREATE RULE project_companies_set AS ON UPDATE TO project_companies DO INSTEAD
  UPDATE project_company_assignment
  SET company_id = new.company_id, project_id = new.project_id, info = new.info,
      has_access = new.has_access, access_right = new.access_right,
      db_status  = new.db_status,
      start_date = new.start_date, end_date = new.end_date
  WHERE project_company_assignment_id = old.project_company_assignment_id;

CREATE RULE project_companies_del AS ON DELETE TO project_companies DO INSTEAD
  DELETE FROM project_company_assignment
  WHERE project_company_assignment_id = old.project_company_assignment_id;


-- unused? sounds useful, but maybe its overkill
CREATE VIEW project_acl AS
  SELECT pca.*
  FROM project_company_assignment pca
  WHERE has_access = 1;


-- PDA

CREATE TABLE palm_address (
  company_id                    INT NOT NULL,
  device_id                     VARCHAR(50) NOT NULL,
  palm_address_id               INT NOT NULL,
  palm_id                       INT,
  category_index                INT,
  is_deleted                    SMALLINT NOT NULL,
  is_modified                   SMALLINT NOT NULL,
  is_archived                   SMALLINT NOT NULL,
  is_new                        SMALLINT NOT NULL,
  is_private                    SMALLINT NOT NULL,
  md5hash                       VARCHAR(50) NOT NULL,
  address                       VARCHAR(255),
  city                          VARCHAR(255),
  company                       VARCHAR(255),
  country                       VARCHAR(255),
  display_phone                 INT NOT NULL,
  firstname                     VARCHAR(255),
  lastname                      VARCHAR(255),
  note                          TEXT,
  phone0                        VARCHAR(255),
  phone1                        VARCHAR(255),
  phone2                        VARCHAR(255),
  phone3                        VARCHAR(255),
  phone4                        VARCHAR(255),
  phone_label_id0               INT NOT NULL,
  phone_label_id1               INT NOT NULL,
  phone_label_id2               INT NOT NULL,
  phone_label_id3               INT NOT NULL,
  phone_label_id4               INT NOT NULL,
  state                         VARCHAR(255),
  title                         VARCHAR(255),
  zipcode                       VARCHAR(255),
  custom1                       VARCHAR(255),
  custom2                       VARCHAR(255),
  custom3                       VARCHAR(255),
  custom4                       VARCHAR(255),
  skyrix_id                     INT,
  skyrix_sync                   INT,
  skyrix_version                INT,
  skyrix_type                   VARCHAR(10),
  object_version                INT,
  skyrix_palm_version           INT,
  CONSTRAINT                    pk_palm_address PRIMARY KEY (palm_address_id)
);

CREATE TABLE palm_date (
  company_id                    INT NOT NULL,
  device_id                     VARCHAR(50) NOT NULL,
  palm_date_id                  INT NOT NULL,
  palm_id                       INT,
  category_index                INT,
  is_deleted                    SMALLINT NOT NULL,
  is_modified                   SMALLINT NOT NULL,
  is_archived                   SMALLINT NOT NULL,
  is_new                        SMALLINT NOT NULL,
  is_private                    SMALLINT NOT NULL,
  md5hash                       VARCHAR(50) NOT NULL,
  alarm_advance_time            INT NOT NULL,
  alarm_advance_unit            INT NOT NULL,
  description                   VARCHAR(255) NOT NULL,
  enddate                       TIMESTAMP WITH TIME ZONE,
  is_alarmed                    SMALLINT NOT NULL,
  is_untimed                    SMALLINT NOT NULL,
  note                          TEXT,
  repeat_enddate                TIMESTAMP WITH TIME ZONE,
  repeat_frequency              INT,
  repeat_on                     INT,
  repeat_start_week             INT,
  repeat_type                   INT,
  startdate                     TIMESTAMP WITH TIME ZONE,
  exceptions                    TEXT,
  skyrix_id                     INT,
  skyrix_sync                   INT,
  skyrix_version                INT,
  object_version                INT,
  skyrix_palm_version           INT,
  CONSTRAINT pk_palm_date PRIMARY KEY (palm_date_id)
);

CREATE TABLE palm_memo (
  company_id     INT NOT NULL,
  device_id      VARCHAR(50) NOT NULL,
  palm_memo_id   INT NOT NULL,
  palm_id        INT,
  category_index INT,
  is_deleted     SMALLINT NOT NULL,
  is_modified    SMALLINT NOT NULL,
  is_archived    SMALLINT NOT NULL,
  is_new         SMALLINT NOT NULL,
  is_private     SMALLINT NOT NULL,
  md5hash        VARCHAR(50) NOT NULL,
  memo           TEXT NOT NULL,
  skyrix_id      INT,
  skyrix_sync    INT,
  skyrix_version INT,
  object_version                INT,
  skyrix_palm_version           INT,
  CONSTRAINT     pk_palm_memo PRIMARY KEY (palm_memo_id)
);

CREATE TABLE palm_todo (
  company_id     INT NOT NULL,
  device_id      VARCHAR(50) NOT NULL,
  palm_todo_id   INT NOT NULL,
  palm_id        INT,
  category_index INT,
  is_deleted     SMALLINT NOT NULL,
  is_modified    SMALLINT NOT NULL,
  is_archived    SMALLINT NOT NULL,
  is_new         SMALLINT NOT NULL,
  is_private     SMALLINT NOT NULL,
  md5hash        VARCHAR(50) NOT NULL,
  description    VARCHAR(255) NOT NULL,
  duedate        TIMESTAMP WITH TIME ZONE,
  note           TEXT,
  priority       INT NOT NULL,
  is_completed   SMALLINT NOT NULL,
  skyrix_id      INT,
  skyrix_sync    INT,
  skyrix_version INT,
  object_version                INT,
  skyrix_palm_version           INT,
  CONSTRAINT     pk_palm_todo PRIMARY KEY (palm_todo_id)
);

CREATE TABLE palm_category (
  company_id       INT NOT NULL,
  device_id        VARCHAR(50) NOT NULL,
  palm_category_id INT NOT NULL,
  palm_id          INT,
  palm_table       VARCHAR(10) NOT NULL,
  is_modified      SMALLINT NOT NULL,
  md5hash          VARCHAR(50) NOT NULL,
  category_index   INT NOT NULL,
  category_name    VARCHAR(255) NOT NULL,
  CONSTRAINT       pk_palm_category PRIMARY KEY (palm_category_id)
);

-- End PDA

INSERT INTO person (company_id, login, name, description, is_account, 
                    is_intra_account, is_extra_account, is_person, number, 
                    is_private, is_readonly, db_status, object_version, 
                    owner_id) 
  VALUES (10000, 'root', 'root', 'Administrator', 1, 1, 0, 1, 'LS10000', 0, 1,
          'inserted', 1, 10000);

INSERT INTO staff (staff_id, company_id, is_account) 
  VALUES (10001, 10000, 1);

INSERT INTO company_info (company_info_id, company_id)
  VALUES (10002, 10000);

INSERT INTO person (company_id, owner_id, login, name, description, 
                    is_account, is_intra_account, is_extra_account, 
                    is_person, number, is_private, is_readonly, is_locked, 
                    is_template_user, db_status, object_version) 
  VALUES (9999, 10000, 'template', 'template', 'Template', 1, 1, 0, 1, 
          'LS9999', 1, 1, 1, 1, 'inserted', 1);

INSERT INTO staff (staff_id, company_id, is_account) 
  VALUES (9998, 9999, 1);

INSERT INTO company_info (company_info_id, company_id)
  VALUES (9997, 9999);

INSERT INTO team (company_id, description, is_team, number, login, db_status,
                  object_version, owner_id, is_readonly, is_private) 
  VALUES (10003, 'all intranet', 1, 'LS10003', 'all intranet', 'inserted', 1,
          10000, 1, 0);

INSERT INTO staff (staff_id, company_id, is_team) 
  VALUES (10004, 10003, 1);

INSERT INTO company_info (company_info_id, company_id)
  VALUES (10005, 10003);


INSERT INTO team (company_id, description, is_team, number, login, db_status, 
                  object_version, owner_id, is_readonly, is_private)
  VALUES (9991, 'news editors', 1, 'LS9991', 'newseditors', 'inserted', 1,
          10000, 1, 0);

INSERT INTO staff (staff_id, company_id, is_team) 
  VALUES (9992, 9991, 1);

INSERT INTO company_info (company_info_id, company_id)
  VALUES (9993, 9991);


INSERT INTO team (company_id, description, is_team, number, login, db_status, 
                  object_version, owner_id, is_readonly, is_private)
  VALUES (9981, 'team creators', 1, 'LS9981', 'teamcreators', 'inserted', 1,
          10000, 1, 0);

INSERT INTO staff (staff_id, company_id, is_team) 
  VALUES (9982, 9981, 1);

INSERT INTO company_info (company_info_id, company_id)
  VALUES (9983, 9981);


INSERT INTO news_article (news_article_id, name, caption, is_index_article,
                          object_version)
  VALUES (10006, 'index', 'Index', 1, 1);

CREATE SEQUENCE key_generator INCREMENT 10 START 10100;

UPDATE project_company_assignment set access_right = 'r' 
  WHERE has_access = 1 AND access_right is null
;


CREATE INDEX action_idx             ON log(action);
CREATE INDEX log_object_idx         ON log(object_id);
CREATE INDEX log_account_id_idx     ON log(account_id);
CREATE INDEX account_id_idx         ON session_log(account_id);
CREATE INDEX session_log_action_idx ON session_log(action);
CREATE INDEX staff__is_team         ON staff(is_team);
CREATE INDEX staff__is_account      ON staff(is_account);

CREATE INDEX company_is_team_idx       ON company(is_team);
CREATE INDEX company_is_enterprise_idx ON company(is_enterprise);
CREATE INDEX company_is_trust_idx      ON company(is_trust);
CREATE INDEX company_is_person_idx     ON company(is_person);

CREATE INDEX person_name_idx               ON person(name);
CREATE INDEX person_firstname_idx          ON person(firstname);
CREATE INDEX person_keywords_idx           ON person(keywords);
CREATE INDEX person_private_idx            ON person(is_private);
CREATE INDEX person_is_account_idx         ON person(is_account);
CREATE INDEX person_is_intra_account_idx   ON person(is_intra_account);
CREATE INDEX person_is_extra_account_idx   ON person(is_extra_account);
CREATE INDEX person_is_template_user_idx   ON person(is_template_user);
CREATE INDEX person_company_db_status_idx  ON person(db_status);

CREATE INDEX enterprise_keywords_idx       ON enterprise(keywords);
CREATE INDEX enterprise_description_idx    ON enterprise(description);
CREATE INDEX enterprise_email_idx          ON enterprise(email);

CREATE INDEX team_description_idx ON team(description);
CREATE INDEX team_is_location_idx ON team(is_location_team);

CREATE INDEX attribute_idx ON company_value(attribute);
CREATE INDEX company_value_type_idx      ON company_value(type);
CREATE INDEX is_absence_idx           ON date_x(is_absence);
CREATE INDEX is_attendance_idx        ON date_x(is_attendance);
CREATE INDEX is_conflict_disabled_idx ON date_x(is_conflict_disabled);
CREATE INDEX resource_names_ind       ON date_x(resource_names);
CREATE INDEX is_fake_idx           ON project(is_fake);
CREATE INDEX project_kind_idx      ON project(kind);
CREATE INDEX project_status_idx    ON project(status);
CREATE INDEX project_db_status_idx ON project(db_status);
CREATE INDEX has_access_idx   ON project_company_assignment(has_access);
CREATE INDEX access_right_idx ON project_company_assignment(access_right);
CREATE INDEX doc_is_note_idx     ON document(is_note);
CREATE INDEX is_folder_idx       ON doc(is_folder);
CREATE INDEX is_object_link_idx  ON doc(is_object_link);
CREATE INDEX is_index_doc_idx    ON doc(is_index_doc);
CREATE INDEX object_link_idx     ON doc(object_link);
CREATE INDEX document_status_idx ON doc(status);
CREATE INDEX doc_title_id_idx    ON doc(title);
CREATE INDEX doc_v_obj_version_idx    ON document_version(object_version);
CREATE INDEX document_editing_status_idx ON document_editing(status);
CREATE INDEX address__name1      ON address(name1);
CREATE INDEX address__name2      ON address(name2);
CREATE INDEX address__name3      ON address(name3);
CREATE INDEX address__street     ON address(street);
CREATE INDEX address__zip        ON address(zip);
CREATE INDEX address__zipcity    ON address(zipcity);
CREATE INDEX address_type_idx    ON address(type);
CREATE INDEX telephone__fnumber     ON telephone(number);
CREATE INDEX telephone__ftype       ON telephone(type);
CREATE INDEX telephone__real_number ON telephone(real_number);
CREATE INDEX job__keywords      ON job(keywords);
CREATE INDEX is_control_job_idx ON job(is_control_job);
CREATE INDEX is_team_job_idx    ON job(is_team_job);
CREATE INDEX priority_idx       ON job(priority);
CREATE INDEX job_kind_idx       ON job(kind);
CREATE INDEX job_status_idx     ON job(job_status);
CREATE INDEX job_db_status_idx  ON job(db_status);
CREATE INDEX is_index_article_idx ON news_article(is_index_article);
CREATE INDEX assignment_kind_idx ON job_assignment(assignment_kind);
CREATE INDEX obj_p_obj_id_idx           ON obj_property(obj_id);
CREATE INDEX obj_p_value_key_idx        ON obj_property(value_key);
CREATE INDEX obj_p_value_string_idx     ON obj_property(value_string);
CREATE INDEX obj_p_namespace_prefix_idx ON obj_property(namespace_prefix);
CREATE INDEX obj_p_access_key_idx       ON obj_property(access_key);

CREATE INDEX obj_l_obj_id_idx        ON obj_link(obj_link_id);
CREATE INDEX obj_l_source_id_idx     ON obj_link(source_id);
CREATE INDEX obj_l_target_id_idx     ON obj_link(target);
CREATE INDEX obj_l_source_type_idx   ON obj_link(source_type);
CREATE INDEX obj_l_target_type_idx   ON obj_link(target_type);
CREATE INDEX obj_l_target_idx        ON obj_link(target_id);
CREATE INDEX obj_l_label_idx         ON obj_link(label);
CREATE INDEX obj_l_type_idx          ON obj_link(link_type);

CREATE INDEX obj_info_objectid ON obj_info(obj_id);

CREATE INDEX obj_p_obj_type_idx         ON obj_property(obj_type);
CREATE INDEX obj_acl_sort_key_idx    ON object_acl(sort_key);
CREATE INDEX obj_acl_object_id_idx   ON object_acl(object_id);
CREATE INDEX obj_acl_action_idx     ON object_acl(action);
CREATE INDEX obj_acl_auth_id_idx     ON object_acl(auth_id);
CREATE INDEX obj_acl_permissions_idx ON object_acl(permissions);

CREATE INDEX log_creation_date_idx ON log(creation_date);
CREATE INDEX log_date_idx ON session_log(log_date);
CREATE INDEX start_date_ind           ON date_x(start_date);
CREATE INDEX end_date_ind             ON date_x(end_date);

CREATE INDEX company_contact_idx ON company(contact_id);
CREATE INDEX company_owner_idx   ON company(owner_id);

CREATE INDEX cinfo_company_idx   ON company_info(company_id);
CREATE INDEX cvalue_company_idx  ON company_value(company_id);

CREATE INDEX cassignment_company_idx    ON company_assignment(company_id);
CREATE INDEX cassignment_subcompany_idx ON company_assignment(sub_company_id);

CREATE INDEX apt_parent_idx ON date_x (parent_date_id);
CREATE INDEX apt_owner_idx  ON date_x (owner_id);
CREATE INDEX apt_team_idx   ON date_x (access_team_id);

CREATE INDEX date_info_apt_idx ON date_info (date_id);

CREATE INDEX date_assign_company_idx ON date_company_assignment(company_id);
CREATE INDEX date_assign_apt_idx ON date_company_assignment(date_id);

CREATE INDEX project_owner_idx  ON project (owner_id);
CREATE INDEX project_team_idx   ON project (team_id);

CREATE INDEX project_assign_company_idx 
  ON project_company_assignment(company_id);
CREATE INDEX project_assign_project_idx 
  ON project_company_assignment(project_id);

CREATE INDEX doc_parent_idx        ON doc(parent_document_id);
CREATE INDEX doc_project_idx       ON doc(project_id);
CREATE INDEX note_project_idx      ON note(project_id);
CREATE INDEX note_date_idx         ON note(date_id);
CREATE INDEX doc_first_owner_idx   ON doc(first_owner_id);
CREATE INDEX doc_current_owner_idx ON doc(current_owner_id);

CREATE INDEX dversion_doc_idx        ON document_version(document_id);
CREATE INDEX dversion_last_owner_idx ON document_version(last_owner_id);
 
CREATE INDEX dediting_doc_idx           ON document_editing(document_id);
CREATE INDEX dediting_current_owner_idx ON document_editing(current_owner_id);

CREATE INDEX tel_company_idx     ON telephone(company_id);
CREATE INDEX address_company_idx ON address(company_id);

CREATE INDEX job_project_idx   ON job(project_id);
CREATE INDEX job_creator_idx   ON job(creator_id);
CREATE INDEX job_executant_idx ON job(executant_id);

CREATE INDEX jobh_job_idx   ON job_history(job_id);
CREATE INDEX jobh_actor_idx ON job_history(actor_id);

CREATE INDEX jobhi_jobh_idx ON job_history_info(job_history_id);

CREATE INDEX newsa_news_idx    ON news_article_link(news_article_id);
CREATE INDEX newsa_subnews_idx ON news_article_link(sub_news_article_id);

CREATE UNIQUE INDEX unique_person_login on person (login);
CREATE UNIQUE INDEX unique_person_number on person (number);
CREATE UNIQUE INDEX unique_enterprise_login on enterprise (login);
CREATE UNIQUE INDEX unique_enterprise_number on enterprise (number);
CREATE UNIQUE INDEX unique_team_login on team (login);
CREATE UNIQUE INDEX unique_team_number on team (number);

CREATE INDEX palmaddr_company_idx ON palm_address (company_id);
CREATE INDEX palmaddr_device_idx ON palm_address (device_id);
CREATE INDEX palmaddr_palm_idx ON palm_address (palm_id);
CREATE INDEX palmaddr_md5hash_idx ON palm_address (md5hash);
CREATE INDEX palmaddr_skyrix_idx ON palm_address (skyrix_id);
CREATE INDEX palmaddr_cat_idx ON palm_address(category_index);
CREATE INDEX palmaddr_is_del_idx ON palm_address(is_deleted);
CREATE INDEX palmaddr_is_mod_idx ON palm_address(is_modified);
CREATE INDEX palmaddr_is_arch_idx ON palm_address(is_archived);
CREATE INDEX palmaddr_is_new_idx ON palm_address(is_new);
CREATE INDEX palmaddr_is_priv_idx ON palm_address(is_private);
CREATE INDEX palmaddr_sky_sync_idx ON palm_address(skyrix_sync);
CREATE INDEX palmaddr_sky_vers_idx ON palm_address(skyrix_version);
CREATE INDEX palmaddr_sky_type_idx ON palm_address(skyrix_type);

CREATE INDEX palmmemo_company_idx ON palm_memo (company_id);
CREATE INDEX palmmemo_device_idx ON palm_memo (device_id);
CREATE INDEX palmmemo_palm_idx ON palm_memo (palm_id);
CREATE INDEX palmmemo_md5hash_idx ON palm_memo (md5hash);
CREATE INDEX palmmemo_skyrix_idx ON palm_memo (skyrix_id);

CREATE INDEX palmcat_company_idx ON palm_category (company_id);
CREATE INDEX palmcat_device_idx ON palm_category (device_id);
CREATE INDEX palmcat_palm_idx ON palm_category (palm_id);
CREATE INDEX palmcat_md5hash_idx ON palm_category (md5hash);
CREATE INDEX palmcat_table_idx ON palm_category (palm_table);

CREATE INDEX palmdate_company_idx ON palm_date (company_id);
CREATE INDEX palmdate_device_idx ON palm_date (device_id);
CREATE INDEX palmdate_palm_idx ON palm_date (palm_id);
CREATE INDEX palmdate_md5hash_idx ON palm_date (md5hash);
CREATE INDEX palmdate_skyrix_idx ON palm_date (skyrix_id);
CREATE INDEX palmdate_startdate_idx ON palm_date (startdate);
CREATE INDEX palmdate_enddate_idx ON palm_date (enddate);

CREATE INDEX palmtodo_company_idx ON palm_todo (company_id);
CREATE INDEX palmtodo_device_idx ON palm_todo (device_id);
CREATE INDEX palmtodo_palm_idx ON palm_todo (palm_id);
CREATE INDEX palmtodo_md5hash_idx ON palm_todo (md5hash);
CREATE INDEX palmtodo_skyrix_idx ON palm_todo (skyrix_id);

-- table versions -------------------------------------------------------------

INSERT INTO table_version (table_name, table_version)
  VALUES ('_model', 55);
INSERT INTO table_version (table_name, table_version)
  VALUES ('staff', 41);

INSERT INTO table_version (table_name, table_version)
  VALUES ('company', 55);
INSERT INTO table_version (table_name, table_version)
  VALUES ('company_info', 42);
INSERT INTO table_version (table_name, table_version)
  VALUES ('company_value', 54);
INSERT INTO table_version (table_name, table_version)
  VALUES ('company_category', 41);
INSERT INTO table_version (table_name, table_version)
  VALUES ('company_assignment', 55);

INSERT INTO table_version (table_name, table_version)
  VALUES ('appointment_resource', 41);
INSERT INTO table_version (table_name, table_version)
  VALUES ('appointment', 47);
INSERT INTO table_version (table_name, table_version)
  VALUES ('date', 55); -- actually date_x
INSERT INTO table_version (table_name, table_version)
  VALUES ('date_info', 42);
INSERT INTO table_version (table_name, table_version)
  VALUES ('date_company_assignment', 43);

INSERT INTO table_version (table_name, table_version)
  VALUES ('project', 54);
INSERT INTO table_version (table_name, table_version)
  VALUES ('project_info', 42);
INSERT INTO table_version (table_name, table_version)
  VALUES ('project_company_assignment', 55);
INSERT INTO table_version (table_name, table_version)
  VALUES ('document', 55);
INSERT INTO table_version (table_name, table_version)
  VALUES ('document_version', 55);
INSERT INTO table_version (table_name, table_version)
  VALUES ('document_editing', 55);

INSERT INTO table_version (table_name, table_version)
  VALUES ('address', 54);
INSERT INTO table_version (table_name, table_version)
  VALUES ('telephone', 41);

INSERT INTO table_version (table_name, table_version)
  VALUES ('job', 55);
INSERT INTO table_version (table_name, table_version)
  VALUES ('job_history', 56);
INSERT INTO table_version (table_name, table_version)
  VALUES ('job_history_info', 42);

INSERT INTO table_version (table_name, table_version)
  VALUES ('news_article', 41);
INSERT INTO table_version (table_name, table_version)
  VALUES ('news_article_link', 41);

INSERT INTO table_version (table_name, table_version)
  VALUES ('key_generator', 41);
INSERT INTO table_version (table_name, table_version)
  VALUES ('key_lock', 41);

INSERT INTO table_version (table_name, table_version)
  VALUES ('person', 45);
INSERT INTO table_version (table_name, table_version)
  VALUES ('enterprise', 46);
INSERT INTO table_version (table_name, table_version)
  VALUES ('trust', 45);
INSERT INTO table_version (table_name, table_version)
  VALUES ('team', 45);

INSERT INTO table_version (table_name, table_version)
  VALUES ('note', 41);
INSERT INTO table_version (table_name, table_version)
  VALUES ('doc', 41);
INSERT INTO table_version (table_name, table_version)
  VALUES ('log', 42);

INSERT INTO table_version (table_name, table_version)
  VALUES ('invoice', 42);
INSERT INTO table_version (table_name, table_version)
  VALUES ('invoice_action', 42);
INSERT INTO table_version (table_name, table_version)
  VALUES ('article_category', 41);
INSERT INTO table_version (table_name, table_version)
  VALUES ('article_unit', 41);
INSERT INTO table_version (table_name, table_version)
  VALUES ('article', 42);
INSERT INTO table_version (table_name, table_version)
  VALUES ('invoice_article_assignment', 42);

INSERT INTO table_version (table_name, table_version)
  VALUES ('palm_address', 43);
INSERT INTO table_version (table_name, table_version)
  VALUES ('palm_date', 43);
INSERT INTO table_version (table_name, table_version)
  VALUES ('palm_memo', 43);
INSERT INTO table_version (table_name, table_version)
  VALUES ('palm_todo', 43);
INSERT INTO table_version (table_name, table_version)
  VALUES ('palm_category', 41);

INSERT INTO table_version (table_name, table_version)
  VALUES ('resource', 42);
INSERT INTO table_version (table_name, table_version)
  VALUES ('obj_property', 42);
INSERT INTO table_version (table_name, table_version)
  VALUES ('obj_link', 42);
